<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 관례상 mapper파일의 경로를 이름으로 많이 사용함 -->
<mapper namespace="namoo.mybatis.ems.mapper.EmployeeMapper">

	<!-- 전체사원 조회를 위한 SQL 매핑 -->
	<select id="findAll" resultType="Employee"> 
		SELECT employee_id  id,
				first_name  firstName,
				last_name  lastName,
				email  email,
				phone_number  phoneNumber,
				TO_CHAR(hire_date, 'YYYY-MM-DD')  hireDate,
				salary  salary
		FROM employees
		ORDER BY hire_date ASC
	</select>
	
	<!-- 사원번호로 사원 조회 -->
	<!-- <select id="findById" parameterType="java.lang.Integer" resultType="이 타입으로 return받는다."> -->
	<!-- parameterType은 위처럼 정식 경로를 사용하는게 맞지만 내장별칭도 있어서 아래처럼 별칭인 int로 사용가능한 경우가 있음 -->
	<!--  resultType에 별칭사용-->
	<select id="findById" parameterType="int" resultType="Employee">
	
		SELECT employee_id id,
			first_name firstName,
			last_name lastName,
			email email,
			phone_number phoneNumber,
			TO_CHAR(hire_date, 'YYYY-MM-DD') hireDate,
			salary salary
		FROM employees
		WHERE employee_id = #{value}
	</select>
	<!-- 사원 급여 조회 -->
	<select id="findBySalary" parameterType="int" resultType="int">
		SELECT salary
		FROM employees
		WHERE employee_id = #{value}
	</select>
	<!-- 급여범위로 사원 검색 -->
	<!-- 파라미터 타입을 map으로 설정한 경우 -->
	<select id="findBySalaryRange" parameterType="map" resultType="Employee">
		SELECT employee_id "id",
			first_name "firstName",
			last_name "lastName",
			email "email",
			phone_number "phoneNumber",
			TO_CHAR(hire_date, 'YYYY-MM-DD') "hireDate",
			salary "salary"
		FROM employees
		WHERE salary BETWEEN #{min} AND #{max}
		ORDER BY salary DESC
		<!-- WHERE salary &gt;= #{min} AND salary &lt;= #{max} -->
	</select>
	<!-- 성(last_name)으로 사원 검색(like 검색) -->
	<select id="findByLastName" parameterType="string" resultType="Employee">
		SELECT employee_id "id",
			first_name "firstName",
			last_name "lastName",
			email "email",
			phone_number "phoneNumber",
			TO_CHAR(hire_date, 'YYYY-MM-DD') "hireDate",
			salary "salary"
		FROM employees
		WHERE UPPER(last_name) LIKE #{lastName}
	</select>
	
	<!-- HashMap을 이용한 검색 : 조인 시 사용 -->
	<select id="findByJoin" resultType="map">
		SELECT e.employee_id "id",
			e.first_name "firstName",
			e.last_name "lastName",
			d.department_name "departmentName"
			FROM employees e
		JOIN departments d
		ON e.department_id = d.department_id
	</select>
	
	<!-- 자주 사용되고, 자바빈의 속성이름과 테이블 컬럼이름이 다른 경우 resultMap 선언 -->
	<!-- 빈 속성 이름과 sql문의 컬럼 이름을 일치시켜주는 작업 -->
	<resultMap id="employeeMap" type="namoo.mybatis.ems.dto.Employee">
		<result property="id" column="employee_id" />
		<result property="email" column="email" />
		<result property="phoneNumber" column="phone_number" />
		<result property="hireDate" column="hire_date" />
	</resultMap>
	<!-- 전체사원 조회 -->
	<!-- javabeen타입 -> 객체타입 -->
	<select id="findByAll2" resultMap="employeeMap">
		SELECT employee_id,
		email,
		phone_number,
		TO_CHAR(hire_date, 'YYYY-MM-DD') "hire_date"
		FROM employees
		ORDER BY hire_date ASC
	</select>
	<!-- 사원 등록 -->
	<insert id="create" parameterType="Employee">
		INSERT INTO employees
			(employee_id,
			first_name,
			last_name,
			email,
			phone_number,
			hire_date,
			job_id,
			salary,
			manager_id,
			department_id)
			
		VALUES (employees_seq.nextval,
			#{firstName},
			#{lastName},
			#{email},
			#{phoneNumber},
			TO_DATE(#{hireDate}, 'YYYY-MM-DD'),
			#{jobId},
			#{salary},
			#{managerId},
			#{departmentId})

	</insert>
	<!-- 사원 정보 수정 -->
	<update id="update" parameterType="Employee">
		UPDATE employees
		SET salary = #{salary}
		WHERE employee_id = #{id}
	</update>
	
	<!-- 사원 정보 수정(set, if 태그를 이용한 동적 SQL) -->
	<update id="update2" parameterType="Employee">
	<!-- Employee에 id값만 아니라 만약 추가적으로 입력되는 아래의 3개의 값이 있다면 그것도 같이 update -->
		UPDATE employees
		<set>
			<if test="firstName != null">first_name = #{firstName},</if>
			<if test="lastName != null">last_name = #{lastName},</if>
			<if test="salary != null">salary = #{salary}</if>
		</set>
		WHERE employee_id= #{id}
	</update>
	
	<!-- 사원 삭제 -->
	<delete id="delete" parameterType="int">
		DELETE FROM employees
		WHERE employee_id = #{value}
	</delete>
	<!-- 동적 SQL -->
	<select id="search" parameterType="map" resultType="Employee">
		SELECT employee_id "id",
		first_name "firstName",
		salary
		FROM employees
		<if test="type != null">
			<choose>
				<when test="type == 'id'">
					WHERE employee_id = #{value}
				</when>
				<when test="type == 'name'">
					WHERE first_name like #{value}
				</when>
				<otherwise></otherwise>

			</choose>
		</if>
	</select>
</mapper>